{
  "maintainer_email": "cookbooks@opscode.com",
  "name": "haproxy",
  "suggestions": {
  },
  "recommendations": {
  },
  "long_description": "Description\n===========\n\nInstalls haproxy and prepares the configuration location.\n\nRequirements\n============\n\n## Platform\n\n* Ubuntu (10.04+ due to config option change)\n* Debian (6.0+)\n\nAttributes\n==========\n\n* `node['haproxy']['incoming_address']` - sets the address to bind the\n  haproxy process on, 0.0.0.0 (all addresses) by default\n* `node['haproxy']['incoming_port']` - sets the port on which haproxy\n  listens\n* `node['haproxy']['member_port']` - the port that member systems will\n  be listening on, default 80\n* `node['haproxy']['app_server_role']` - used by the `app_lb` recipe\n  to search for a specific role of member systems. Default\n  `webserver`.\n* `node['haproxy']['balance_algorithm']` - sets the load balancing\n  algorithm; defaults to roundrobin.\n* `node['haproxy']['enable_ssl']` - whether or not to create listeners\n  for ssl, default false\n* `node['haproxy']['ssl_incoming_address']` - sets the address to bind\n  the haproxy on for SSL, 0.0.0.0 (all addresses) by default\n* `node['haproxy']['ssl_member_port']` - the port that member systems\n  will be listening on for ssl, default 8443\n* `node['haproxy']['ssl_incoming_port']` - sets the port on which\n  haproxy listens for ssl, default 443\n* `node['haproxy']['httpchk']` - used by the `app_lb` recipe. If set,\n  will configure httpchk in haproxy.conf\n* `node['haproxy']['ssl_httpchk']` - used by the `app_lb` recipe. If\n  set and `enable_ssl` is true, will configure httpchk in haproxy.conf\n  for the `ssl_application` section\n* `node['haproxy']['enable_admin']` - whether to enable the admin\n  interface. default true. Listens on port 22002.\n* `node['haproxy']['admin']['address_bind']` - sets the address to\n  bind the administrative interface on, 127.0.0.1 by default\n* `node['haproxy']['admin']['port']` - sets the port for the\n  administrative interface, 22002 by default\n* `node['haproxy']['pid_file']` - the PID file of the haproxy process,\n  used in the tuning recipe.\n* `node['haproxy']['defaults_options']` - an array of options to use\n  for the config file's `defaults` stanza, default is\n  [\"httplog\", \"dontlognull\", \"redispatch\"]\n* `node['haproxy']['defaults_timeouts']['connect']` - connect timeout\n  in defaults stanza\n* `node['haproxy']['defaults_timeouts']['client']` - client timeout in\n  defaults stanza\n* `node['haproxy']['defaults_timeouts']['server']` - server timeout in\n  defaults stanza\n* `node['haproxy']['x_forwarded_for']` - if true, creates an\n  X-Forwarded-For header containing the original client's IP address.\n  This option disables KeepAlive.\n* `node['haproxy']['member_max_connections']` - the maxconn value to\n  be set for each app server\n* `node['haproxy']['user']` - user that haproxy runs as\n* `node['haproxy']['group']` - group that haproxy runs as\n* `node['haproxy']['global_max_connections']` - in the `app_lb`\n  config, set the global maxconn\n* `node['haproxy']['member_max_connections']` - in both configs, set\n  the maxconn per member\n* `node['haproxy']['frontend_max_connections']` - in the `app_lb`\n  config, set the the maxconn per frontend member\n* `node['haproxy']['frontend_ssl_max_connections']` - in the `app_lb`\n  config, set the maxconn per frontend member using SSL\n* `node['haproxy']['install_method']` - determines which method is\n  used to install haproxy, must be 'source' or 'package'. defaults to\n  'package'\n* `node['haproxy']['conf_dir']` - the location of the haproxy config\n  file\n* `node['haproxy']['source']['version']` - the version of haproxy to\n  install\n* `node['haproxy']['source']['url']` - the full URL to the haproxy\n  source package\n* `node['haproxy']['source']['checksum']` - the checksum of the\n  haproxy source package\n* `node['haproxy']['source']['prefix']` - the prefix used to `make\n  install` haproxy\n* `node['haproxy']['source']['target_os']` - the target used to\n  `make` haproxy\n* `node['haproxy']['source']['target_cpu']` - the target cpu used to\n  `make` haproxy\n* `node['haproxy']['source']['target_arch']` - the target arch used\n  to `make` haproxy\n* `node['haproxy']['source']['use_pcre']` - whether to build with\n  libpcre support\n\nRecipes\n=======\n\n## default\n\nSets up haproxy using statically defined configuration. To override\nthe configuration, modify the templates/default/haproxy.cfg.erb file\ndirectly, or supply your own and override the cookbook and source by\nreopening the `template[/etc/haproxy/haproxy.cfg]` resource.\n\n## app\\_lb\n\nSets up haproxy using dynamically defined configuration through\nsearch. See __Usage__ below.\n\n## tuning\n\nUses the community `cpu` cookbook's `cpu_affinity` LWRP to set\naffinity for the haproxy process.\n\n## install\\_package\n\nInstalls haproxy through the package manager. Used by the `default`\nand `app_lb` recipes.\n\n## install\\_source\n\nInstalls haproxy from source. Used by the `default` and `app_lb`\nrecipes.\n\nUsage\n=====\n\nUse either the default recipe or the `app_lb` recipe.\n\nWhen using the default recipe, modify the haproxy.cfg.erb file with\nlistener(s) for your sites/servers.\n\nThe `app_lb` recipe is designed to be used with the application\ncookbook, and provides search mechanism to find the appropriate\napplication servers. Set this in a role that includes the\nhaproxy::app_lb recipe. For example,\n\n    name \"load_balancer\"\n    description \"haproxy load balancer\"\n    run_list(\"recipe[haproxy::app_lb]\")\n    override_attributes(\n      \"haproxy\" => {\n        \"app_server_role\" => \"webserver\"\n      }\n    )\n\nThe search uses the node's `chef_environment`. For example, create\n`environments/production.rb`, then upload it to the server with knife\n\n    % cat environments/production.rb\n    name \"production\"\n    description \"Nodes in the production environment.\"\n    % knife environment from file production.rb\n\nLicense and Author\n==================\n\n- Author:: Joshua Timberman (<joshua@opscode.com>)\n- Copyright:: 2009-2012, Opscode, Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "platforms": {
    "ubuntu": ">= 0.0.0",
    "debian": ">= 0.0.0"
  },
  "license": "Apache 2.0",
  "recipes": {
    "haproxy::app_lb": "Installs and configures haproxy by searching for nodes of a particular role",
    "haproxy": "Installs and configures haproxy"
  },
  "providing": {
  },
  "maintainer": "Opscode, Inc.",
  "conflicting": {
  },
  "dependencies": {
    "cpu": ">= 0.2.0",
    "build-essential": ">= 0.0.0"
  },
  "replacing": {
  },
  "version": "1.3.3",
  "groupings": {
  },
  "attributes": {
    "haproxy/defaults_timeouts/connect": {
      "calculated": false,
      "choice": [

      ],
      "default": "5s",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy connect timeout",
      "description": "Connect timeout in defaults stanza."
    },
    "haproxy/ssl_httpchk": {
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy SSL HTTP health check",
      "description": "Used by the app_lb recipe. If set and enable_ssl is true, will configure httpchk in haproxy.conf for the ssl_application section."
    },
    "haproxy/global_max_connections": {
      "calculated": false,
      "choice": [

      ],
      "default": "4096",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy global max connections",
      "description": "In the app_lb config, set the global maxconn."
    },
    "haproxy/ssl_incoming_port": {
      "calculated": false,
      "choice": [

      ],
      "default": "443",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy incoming port",
      "description": "Sets the port on which haproxy listens for ssl, default 443."
    },
    "haproxy/source/use_pcre": {
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy source use PCRE",
      "description": "Whether to build with libpcre support."
    },
    "haproxy/source/target_arch": {
      "calculated": false,
      "choice": [

      ],
      "default": "",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy source target arch",
      "description": "The target arch used to make haproxy."
    },
    "haproxy/admin/port": {
      "calculated": false,
      "choice": [

      ],
      "default": "22002",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy admin port",
      "description": "Sets the port for the administrative interface, 22002 by default."
    },
    "haproxy/ssl_incoming_address": {
      "calculated": false,
      "choice": [

      ],
      "default": "0.0.0.0",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy ssl incoming address",
      "description": "Sets the address to bind the haproxy on for SSL, 0.0.0.0 (all addresses) by default."
    },
    "haproxy/incoming_port": {
      "calculated": false,
      "choice": [

      ],
      "default": "80",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy incoming port",
      "description": "Sets the port on which haproxy listens."
    },
    "haproxy/frontend_max_connections": {
      "calculated": false,
      "choice": [

      ],
      "default": "2000",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy frontend max connections",
      "description": "In the app_lb config, set the the maxconn per frontend member."
    },
    "haproxy/group": {
      "calculated": false,
      "choice": [

      ],
      "default": "haproxy",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy group",
      "description": "Group that haproxy runs as."
    },
    "haproxy/source/target_cpu": {
      "calculated": false,
      "choice": [

      ],
      "default": "",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy source target CPU",
      "description": "The target cpu used to make haproxy."
    },
    "haproxy/source/target_os": {
      "calculated": false,
      "choice": [

      ],
      "default": "generic",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy source target OS",
      "description": "The target used to make haproxy."
    },
    "haproxy/member_max_connections": {
      "calculated": false,
      "choice": [

      ],
      "default": "100",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy member max connections",
      "description": "The maxconn value to be set for each app server."
    },
    "haproxy/httpchk": {
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy HTTP health check",
      "description": "Used by the haproxy::app_lb recipe. If set, will configure httpchk in haproxy.conf."
    },
    "haproxy/enable_ssl": {
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy enable ssl",
      "description": "Whether or not to create listeners for ssl, default false."
    },
    "haproxy/balance_algorithm": {
      "calculated": false,
      "choice": [

      ],
      "default": "roundrobin",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy balance algorithm",
      "description": "Sets the load balancing algorithm; defaults to roundrobin."
    },
    "haproxy/user": {
      "calculated": false,
      "choice": [

      ],
      "default": "haproxy",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy user",
      "description": "User that haproxy runs as."
    },
    "haproxy/x_forwarded_for": {
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy X-Forwarded-For",
      "description": "If true, creates an X-Forwarded-For header containing the original client's IP address. This option disables KeepAlive."
    },
    "haproxy/app_server_role": {
      "calculated": false,
      "choice": [

      ],
      "default": "webserver",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy app server role",
      "description": "Used by the app_lb recipe to search for a specific role of member systems. Default webserver."
    },
    "haproxy/member_port": {
      "calculated": false,
      "choice": [

      ],
      "default": "8080",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy member port",
      "description": "The port that member systems will be listening on, default 8080."
    },
    "haproxy/source/prefix": {
      "calculated": false,
      "choice": [

      ],
      "default": "/usr/local",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy source prefix",
      "description": "The prefix used to make install haproxy."
    },
    "haproxy/defaults_timeouts/client": {
      "calculated": false,
      "choice": [

      ],
      "default": "50s",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy client timeout",
      "description": "Client timeout in defaults stanza."
    },
    "haproxy/default options": {
      "calculated": false,
      "choice": [

      ],
      "default": [
        "httplog",
        "dontlognull",
        "redispatch"
      ],
      "type": "array",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy default options",
      "description": "An array of options to use for the config file's defaults stanza, default is [\"httplog\", \"dontlognull\", \"redispatch\"]."
    },
    "haproxy/pid_file": {
      "calculated": false,
      "choice": [

      ],
      "default": "/var/run/haproxy.pid",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy PID file",
      "description": "The PID file of the haproxy process, used in the tuning recipe."
    },
    "haproxy/install_method": {
      "calculated": false,
      "choice": [
        "package",
        "source"
      ],
      "default": "package",
      "type": "string",
      "recipes": [

      ],
      "required": "recommended",
      "display_name": "HAProxy install method",
      "description": "Determines which method is used to install haproxy, must be 'source' or 'package'. defaults to 'package'."
    },
    "haproxy/frontend_ssl_max_connections": {
      "calculated": false,
      "choice": [

      ],
      "default": "2000",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy frontend SSL max connections",
      "description": "In the app_lb config, set the maxconn per frontend member using SSL."
    },
    "haproxy/defaults_timeouts/server": {
      "calculated": false,
      "choice": [

      ],
      "default": "50s",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy server timeout",
      "description": "Server timeout in defaults stanza."
    },
    "haproxy/enable_admin": {
      "calculated": false,
      "choice": [

      ],
      "default": "true",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy enable admin",
      "description": "Whether to enable the admin interface. default true. Listens on port 22002."
    },
    "haproxy/source/checksum": {
      "calculated": false,
      "choice": [

      ],
      "default": "ba221b3eaa4d71233230b156c3000f5c2bd4dace94d9266235517fe42f917fc6",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy source checksum",
      "description": "The checksum of the haproxy source package."
    },
    "haproxy/source/url": {
      "calculated": false,
      "choice": [

      ],
      "default": "http://haproxy.1wt.eu/download/1.4/src/haproxy-1.4.22.tar.gz",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy source URL",
      "description": "The full URL to the haproxy source package."
    },
    "haproxy/source/version": {
      "calculated": false,
      "choice": [

      ],
      "default": "1.4.22",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy source version",
      "description": "The version of haproxy to install."
    },
    "haproxy/conf_dir": {
      "calculated": false,
      "choice": [

      ],
      "default": "/etc/haproxy",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy config directory",
      "description": "The location of the haproxy config file."
    },
    "haproxy/admin/address_bind": {
      "calculated": false,
      "choice": [

      ],
      "default": "127.0.0.1",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy admin address bind",
      "description": "Sets the address to bind the administrative interface on, 127.0.0.1 by default."
    },
    "haproxy/ssl_member_port": {
      "calculated": false,
      "choice": [

      ],
      "default": "8443",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy member port",
      "description": "The port that member systems will be listening on for ssl, default 8443."
    },
    "haproxy/incoming_address": {
      "calculated": false,
      "choice": [

      ],
      "default": "0.0.0.0",
      "type": "string",
      "recipes": [

      ],
      "required": "optional",
      "display_name": "HAProxy incoming address",
      "description": "Sets the address to bind the haproxy process on, 0.0.0.0 (all addresses) by default."
    }
  },
  "description": "Installs and configures haproxy"
}